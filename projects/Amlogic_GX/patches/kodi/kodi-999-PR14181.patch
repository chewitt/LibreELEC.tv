From 8261bb59700b653c8389b590a0a327dacf65ae1a Mon Sep 17 00:00:00 2001
From: Lukas Rusak <lorusak@gmail.com>
Date: Fri, 13 Jul 2018 09:54:43 -0700
Subject: [PATCH] gbm/windowing: reset planes on startup

We want to clear the frame buffer upon startup as there is the possibility
that it is displaying something. Since we now run the Kodi GUI on the
overlay plane all the time there is the possibility that we can see
something on the primary plane.
---
 xbmc/windowing/gbm/DRMAtomic.cpp | 41 ++++++++++++++++++++++++++++++++++++++++
 xbmc/windowing/gbm/DRMAtomic.h   |  1 +
 xbmc/windowing/gbm/DRMUtils.cpp  |  4 ++--
 xbmc/windowing/gbm/DRMUtils.h    |  2 ++
 4 files changed, 46 insertions(+), 2 deletions(-)

diff --git a/xbmc/windowing/gbm/DRMAtomic.cpp b/xbmc/windowing/gbm/DRMAtomic.cpp
index d143e2d2ab01..8e8ca6609de3 100644
--- a/xbmc/windowing/gbm/DRMAtomic.cpp
+++ b/xbmc/windowing/gbm/DRMAtomic.cpp
@@ -156,6 +156,11 @@ bool CDRMAtomic::InitDrm()
     return false;
   }
 
+  if (!CDRMAtomic::ResetPlanes())
+  {
+    CLog::Log(LOGDEBUG, "CDRMAtomic::%s - failed to reset planes", __FUNCTION__);
+  }
+
   CLog::Log(LOGDEBUG, "CDRMAtomic::%s - initialized atomic DRM", __FUNCTION__);
   return true;
 }
@@ -197,3 +202,39 @@ bool CDRMAtomic::AddProperty(struct drm_object *object, const char *name, uint64
 
   return true;
 }
+
+bool CDRMAtomic::ResetPlanes()
+{
+  drmModePlaneResPtr plane_resources = drmModeGetPlaneResources(m_fd);
+  if (!plane_resources)
+  {
+    CLog::Log(LOGERROR, "CDRMAtomic::%s - drmModeGetPlaneResources failed: %s", __FUNCTION__, strerror(errno));
+    return false;
+  }
+
+  for (uint32_t i = 0; i < plane_resources->count_planes; i++)
+  {
+    drmModePlanePtr plane = drmModeGetPlane(m_fd, plane_resources->planes[i]);
+    if (!plane)
+      continue;
+
+    drm_object object;
+
+    if (!CDRMUtils::GetProperties(m_fd, plane->plane_id, DRM_MODE_OBJECT_PLANE, &object))
+    {
+      CLog::Log(LOGERROR, "CDRMAtomic::%s - could not get plane %u properties: %s", __FUNCTION__, plane->plane_id, strerror(errno));\
+      drmModeFreePlane(plane);
+      continue;
+    }
+
+    AddProperty(&object, "FB_ID", 0);
+    AddProperty(&object, "CRTC_ID", 0);
+
+    CDRMUtils::FreeProperties(&object);
+    drmModeFreePlane(plane);
+  }
+
+  drmModeFreePlaneResources(plane_resources);
+
+  return true;
+}
diff --git a/xbmc/windowing/gbm/DRMAtomic.h b/xbmc/windowing/gbm/DRMAtomic.h
index 261063dd2054..a66a38ce5292 100644
--- a/xbmc/windowing/gbm/DRMAtomic.h
+++ b/xbmc/windowing/gbm/DRMAtomic.h
@@ -36,6 +36,7 @@ class CDRMAtomic : public CDRMUtils
 
 private:
   void DrmAtomicCommit(int fb_id, int flags, bool rendered, bool videoLayer);
+  bool ResetPlanes();
 
   bool m_need_modeset;
   bool m_active = true;
diff --git a/xbmc/windowing/gbm/DRMUtils.cpp b/xbmc/windowing/gbm/DRMUtils.cpp
index 2d915cfbc794..4b877673ce31 100644
--- a/xbmc/windowing/gbm/DRMUtils.cpp
+++ b/xbmc/windowing/gbm/DRMUtils.cpp
@@ -134,7 +134,7 @@ drm_fb * CDRMUtils::DrmFbGetFromBo(struct gbm_bo *bo)
   return fb;
 }
 
-static bool GetProperties(int fd, uint32_t id, uint32_t type, struct drm_object *object)
+bool CDRMUtils::GetProperties(int fd, uint32_t id, uint32_t type, struct drm_object *object)
 {
   drmModeObjectPropertiesPtr props = drmModeObjectGetProperties(fd, id, type);
   if (!props)
@@ -151,7 +151,7 @@ static bool GetProperties(int fd, uint32_t id, uint32_t type, struct drm_object
   return true;
 }
 
-static void FreeProperties(struct drm_object *object)
+void CDRMUtils::FreeProperties(struct drm_object *object)
 {
   if (object->props_info)
   {
diff --git a/xbmc/windowing/gbm/DRMUtils.h b/xbmc/windowing/gbm/DRMUtils.h
index 8fa3ae7c0909..ae9193abc174 100644
--- a/xbmc/windowing/gbm/DRMUtils.h
+++ b/xbmc/windowing/gbm/DRMUtils.h
@@ -101,6 +101,8 @@ class CDRMUtils
   bool OpenDrm();
   uint32_t GetPropertyId(struct drm_object *object, const char *name);
   drm_fb* DrmFbGetFromBo(struct gbm_bo *bo);
+  static bool GetProperties(int fd, uint32_t id, uint32_t type, struct drm_object *object);
+  static void FreeProperties(struct drm_object *object);
 
   int m_fd;
   struct connector *m_connector = nullptr;
