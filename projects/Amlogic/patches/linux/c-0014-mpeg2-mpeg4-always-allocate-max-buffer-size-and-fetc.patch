From 332fa96f8697d2a07ce0d1e53be4d965f65fb776 Mon Sep 17 00:00:00 2001
From: Maxime Jourdan <mjourdan@baylibre.com>
Date: Tue, 2 Oct 2018 20:07:09 +0200
Subject: [PATCH 14/18] mpeg2,mpeg4: always allocate max buffer size, and fetch
 width/height

MPEG2 & MPEG4 both start decoding right away and there is a risk of DMA
overflow is the userspace didn't setup the correct width/height.

As such, always allocate the maximum buffer size to hold 1920x1080
pictures, even if the bitstream has smaller pictures.

Also read the width/height data from registers and set the session
width/height with them.

Finally, remove useless register writes from mpeg2/mpeg4 init sequences.
---
 drivers/media/platform/meson/vdec/codec_mpeg12.c  | 11 ++---------
 drivers/media/platform/meson/vdec/codec_mpeg4.c   | 11 ++++++-----
 drivers/media/platform/meson/vdec/vdec.c          | 10 ++++++++--
 drivers/media/platform/meson/vdec/vdec.h          | 12 ++++++++++++
 drivers/media/platform/meson/vdec/vdec_platform.c | 15 +++++++++++++++
 5 files changed, 43 insertions(+), 16 deletions(-)

diff --git a/drivers/media/platform/meson/vdec/codec_mpeg12.c b/drivers/media/platform/meson/vdec/codec_mpeg12.c
index 1bd6fb7..d21cb3a 100644
--- a/drivers/media/platform/meson/vdec/codec_mpeg12.c
+++ b/drivers/media/platform/meson/vdec/codec_mpeg12.c
@@ -88,16 +88,7 @@ static int codec_mpeg12_start(struct amvdec_session *sess)
 	amvdec_write_dos(core, MREG_CO_MV_START,
 			 mpeg12->workspace_paddr + WORKSPACE_OFFSET);
 
-	amvdec_write_dos(core, MPEG1_2_REG, 0);
-	amvdec_write_dos(core, PSCALE_CTRL, 0);
 	amvdec_write_dos(core, PIC_HEAD_INFO, 0x380);
-	amvdec_write_dos(core, M4_CONTROL_REG, 0);
-	amvdec_write_dos(core, MREG_BUFFERIN, 0);
-	amvdec_write_dos(core, MREG_BUFFEROUT, 0);
-	amvdec_write_dos(core, MREG_CMD, (sess->width << 16) | sess->height);
-	amvdec_write_dos(core, MREG_ERROR_COUNT, 0);
-	amvdec_write_dos(core, MREG_FATAL_ERROR, 0);
-	amvdec_write_dos(core, MREG_WAIT_BUFFER, 0);
 
 	sess->keyframe_found = 1;
 	sess->priv = mpeg12;
@@ -177,6 +168,8 @@ static irqreturn_t codec_mpeg12_threaded_isr(struct amvdec_session *sess)
 
 	pic_info = amvdec_read_dos(core, MREG_PIC_INFO);
 	is_progressive = pic_info & PICINFO_PROG;
+	sess->width = amvdec_read_dos(core, MREG_PIC_WIDTH);
+	sess->height = amvdec_read_dos(core, MREG_PIC_HEIGHT);
 
 	if (!is_progressive)
 		field = (pic_info & PICINFO_TOP_FIRST) ?
diff --git a/drivers/media/platform/meson/vdec/codec_mpeg4.c b/drivers/media/platform/meson/vdec/codec_mpeg4.c
index 1d574e5..8407887 100644
--- a/drivers/media/platform/meson/vdec/codec_mpeg4.c
+++ b/drivers/media/platform/meson/vdec/codec_mpeg4.c
@@ -14,6 +14,7 @@
 #define DCAC_BUFF_START_IP	0x02b00000
 
 /* map firmware registers to known MPEG4 functions */
+#define MP4_PIC_WH		AV_SCRATCH_7
 #define MREG_BUFFERIN		AV_SCRATCH_8
 #define MREG_BUFFEROUT		AV_SCRATCH_9
 #define MP4_NOT_CODED_CNT	AV_SCRATCH_A
@@ -66,11 +67,6 @@ static int codec_mpeg4_start(struct amvdec_session *sess) {
 
 	amvdec_write_dos(core, MEM_OFFSET_REG,
 			 mpeg4->workspace_paddr - DCAC_BUFF_START_IP);
-	amvdec_write_dos(core, PSCALE_CTRL, 0);
-	amvdec_write_dos(core, MP4_NOT_CODED_CNT, 0);
-	amvdec_write_dos(core, MREG_BUFFERIN, 0);
-	amvdec_write_dos(core, MREG_BUFFEROUT, 0);
-	amvdec_write_dos(core, MREG_FATAL_ERROR, 0);
 	amvdec_write_dos(core, MDEC_PIC_DC_THRESH, 0x404038aa);
 
 	sess->keyframe_found = 1;
@@ -103,6 +99,7 @@ static irqreturn_t codec_mpeg4_isr(struct amvdec_session *sess)
 	struct amvdec_core *core = sess->core;
 	u32 reg;
 	u32 buffer_index;
+	u32 wh;
 	u32 field = V4L2_FIELD_NONE;
 
 	reg = amvdec_read_dos(core, MREG_FATAL_ERROR);
@@ -116,6 +113,10 @@ static irqreturn_t codec_mpeg4_isr(struct amvdec_session *sess)
 	if (!reg)
 		goto end;
 
+	wh = amvdec_read_dos(core, MP4_PIC_WH);
+	sess->width = (wh >> 16) & 0xffff;
+	sess->height = wh & 0xffff;
+
 	buffer_index = reg & BUF_IDX_MASK;
 	if (reg & INTERLACE_FLAG)
 		field = (reg & TOP_FIELD_FIRST_FLAG) ?
diff --git a/drivers/media/platform/meson/vdec/vdec.c b/drivers/media/platform/meson/vdec/vdec.c
index 1f36b59..68a3b75 100644
--- a/drivers/media/platform/meson/vdec/vdec.c
+++ b/drivers/media/platform/meson/vdec/vdec.c
@@ -162,10 +162,16 @@ static int vdec_queue_setup(struct vb2_queue *q,
 {
 	struct amvdec_session *sess = vb2_get_drv_priv(q);
 	const struct amvdec_format *fmt_out = sess->fmt_out;
-	u32 output_size = amvdec_get_output_size(sess);
 	u32 am21c_size = amvdec_am21c_size(sess->width, sess->height);
+	u32 output_size;
 	u32 buffers_total;
 
+	if (fmt_out->flags & AMFMT_ALLOC_MAX_SIZE)
+		output_size = get_output_size(fmt_out->max_width,
+					      fmt_out->max_height);
+	else
+		output_size = amvdec_get_output_size(sess);
+
 	if (*num_planes) {
 		switch (q->type) {
 		case V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE:
@@ -202,7 +208,7 @@ static int vdec_queue_setup(struct vb2_queue *q,
 
 	switch (q->type) {
 	case V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE:
-		sizes[0] = amvdec_get_output_size(sess);
+		sizes[0] = output_size;
 		*num_planes = 1;
 		break;
 	case V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE:
diff --git a/drivers/media/platform/meson/vdec/vdec.h b/drivers/media/platform/meson/vdec/vdec.h
index c38a016..232d94a 100644
--- a/drivers/media/platform/meson/vdec/vdec.h
+++ b/drivers/media/platform/meson/vdec/vdec.h
@@ -133,6 +133,16 @@ struct amvdec_codec_ops {
 };
 
 /**
+ * enum amvdec_format_flag - flags associated with amvdec_format
+ *
+ * @AMFMT_ALLOC_MAX_SIZE: CAPTURE buffers allocated for this format must be big
+ *			  enough to contain the maximum picture size
+ */
+enum amvdec_format_flag {
+	AMFMT_ALLOC_MAX_SIZE = 0x00000001,
+};
+
+/**
  * struct amvdec_format - describes one of the OUTPUT (src) format supported
  *
  * @pixfmt: V4L2 pixel format
@@ -140,6 +150,7 @@ struct amvdec_codec_ops {
  * @max_buffers: maximum amount of CAPTURE (dst) buffers
  * @max_width: maximum picture width supported
  * @max_height: maximum picture height supported
+ * @flags: flags associated with this format
  * @vdec_ops: the VDEC operations that support this format
  * @codec_ops: the codec operations that support this format
  * @firmware_path: Path to the firmware that supports this format
@@ -151,6 +162,7 @@ struct amvdec_format {
 	u32 max_buffers;
 	u32 max_width;
 	u32 max_height;
+	enum amvdec_format_flag flags;
 
 	struct amvdec_ops *vdec_ops;
 	struct amvdec_codec_ops *codec_ops;
diff --git a/drivers/media/platform/meson/vdec/vdec_platform.c b/drivers/media/platform/meson/vdec/vdec_platform.c
index d3214dd..8bc3afd 100644
--- a/drivers/media/platform/meson/vdec/vdec_platform.c
+++ b/drivers/media/platform/meson/vdec/vdec_platform.c
@@ -42,6 +42,7 @@ static const struct amvdec_format vdec_formats_gxbb[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg4_ops,
 		.firmware_path = "meson/gx/vmpeg4_mc_5",
@@ -52,6 +53,7 @@ static const struct amvdec_format vdec_formats_gxbb[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg4_ops,
 		.firmware_path = "meson/gx/h263_mc",
@@ -62,6 +64,7 @@ static const struct amvdec_format vdec_formats_gxbb[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg4_ops,
 		.firmware_path = "meson/gx/vmpeg4_mc_5",
@@ -82,6 +85,7 @@ static const struct amvdec_format vdec_formats_gxbb[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg12_ops,
 		.firmware_path = "meson/gx/vmpeg12_mc",
@@ -92,6 +96,7 @@ static const struct amvdec_format vdec_formats_gxbb[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg12_ops,
 		.firmware_path = "meson/gx/vmpeg12_mc",
@@ -126,6 +131,7 @@ static const struct amvdec_format vdec_formats_gxl[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg4_ops,
 		.firmware_path = "meson/gx/vmpeg4_mc_5",
@@ -136,6 +142,7 @@ static const struct amvdec_format vdec_formats_gxl[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg4_ops,
 		.firmware_path = "meson/gx/h263_mc",
@@ -146,6 +153,7 @@ static const struct amvdec_format vdec_formats_gxl[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg4_ops,
 		.firmware_path = "meson/gx/vmpeg4_mc_5",
@@ -166,6 +174,7 @@ static const struct amvdec_format vdec_formats_gxl[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg12_ops,
 		.firmware_path = "meson/gx/vmpeg12_mc",
@@ -176,6 +185,7 @@ static const struct amvdec_format vdec_formats_gxl[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg12_ops,
 		.firmware_path = "meson/gx/vmpeg12_mc",
@@ -210,6 +220,7 @@ static const struct amvdec_format vdec_formats_gxm[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg4_ops,
 		.firmware_path = "meson/gx/vmpeg4_mc_5",
@@ -220,6 +231,7 @@ static const struct amvdec_format vdec_formats_gxm[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg4_ops,
 		.firmware_path = "meson/gx/h263_mc",
@@ -230,6 +242,7 @@ static const struct amvdec_format vdec_formats_gxm[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg4_ops,
 		.firmware_path = "meson/gx/vmpeg4_mc_5",
@@ -250,6 +263,7 @@ static const struct amvdec_format vdec_formats_gxm[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg12_ops,
 		.firmware_path = "meson/gx/vmpeg12_mc",
@@ -260,6 +274,7 @@ static const struct amvdec_format vdec_formats_gxm[] = {
 		.max_buffers = 8,
 		.max_width = 1920,
 		.max_height = 1080,
+		.flags = AMFMT_ALLOC_MAX_SIZE,
 		.vdec_ops = &vdec_1_ops,
 		.codec_ops = &codec_mpeg12_ops,
 		.firmware_path = "meson/gx/vmpeg12_mc",
-- 
2.7.4

