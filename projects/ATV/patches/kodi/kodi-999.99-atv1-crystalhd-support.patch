From 9598d651b342fcb752aec88f0c73b8949d13f554 Mon Sep 17 00:00:00 2001
From: chewitt <github@chrishewitt.net>
Date: Sat, 16 Jan 2016 17:31:46 +0400
Subject: [PATCH] kodi: add initial crystalhd suppport - thanks Sam

---
 .../kodi/kodi-999.99-atv1-crystalhd-support.patch  | 324 ++++++++++++---------
 1 file changed, 179 insertions(+), 145 deletions(-)

diff --git a/projects/ATV/patches/kodi/kodi-999.99-atv1-crystalhd-support.patch b/projects/ATV/patches/kodi/kodi-999.99-atv1-crystalhd-support.patch
index ed03174..5740bec 100644
--- a/projects/ATV/patches/kodi/kodi-999.99-atv1-crystalhd-support.patch
+++ b/projects/ATV/patches/kodi/kodi-999.99-atv1-crystalhd-support.patch
@@ -1,6 +1,47 @@
+From 8018c2a5cacdb126a621fdad8aca9e21c374d6d8 Mon Sep 17 00:00:00 2001
+From: Sam Nazarko <email@samnazarko.co.uk>
+Date: Sun, 11 Oct 2015 14:46:03 +0100
+Subject: [PATCH] Add support for CrystalHD. Do not use fast_memcpy() and
+ remove CHD pathways which don't make sense (MPEG2, VC1)
+
+Signed-off-by: Sam Nazarko <email@samnazarko.co.uk>
+---
+ .gitignore                                         |    1 +
+ configure.ac                                       |   52 +
+ system/settings/settings.xml                       |    9 +
+ xbmc/Application.cpp                               |   11 +
+ xbmc/DllPaths_generated.h.in                       |    7 +
+ xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp |   25 +
+ xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD.cpp | 2010 ++++++++++++++++++++
+ xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD.h   |  236 +++
+ .../DVDCodecs/Video/DVDVideoCodecCrystalHD.cpp     |  204 ++
+ .../DVDCodecs/Video/DVDVideoCodecCrystalHD.h       |   51 +
+ xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in   |    4 +
+ xbmc/settings/SettingConditions.cpp                |    8 +
+ xbmc/system.h                                      |    1 +
+ 13 files changed, 2619 insertions(+)
+ create mode 100644 xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD.cpp
+ create mode 100644 xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD.h
+ create mode 100644 xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecCrystalHD.cpp
+ create mode 100644 xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecCrystalHD.h
+
+diff --git a/.gitignore b/.gitignore
+index 4d36744..16e2280 100644
+--- a/.gitignore
++++ b/.gitignore
+@@ -504,6 +504,7 @@ lib/cpluff/stamp-h1
+ /xbmc/cores/dvdplayer/DVDCodecs/Makefile
+ /xbmc/cores/dvdplayer/DVDCodecs/Overlay/Makefile
+ /xbmc/cores/dvdplayer/DVDCodecs/Video/libstagefrightICS/Makefile
++/xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD/Makefile
+ /xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile
+ /xbmc/cores/dvdplayer/DVDDemuxers/Makefile
+ /xbmc/cores/dvdplayer/DVDSubtitles/Makefile
+diff --git a/configure.ac b/configure.ac
+index 4e125e5..b54466e 100644
 --- a/configure.ac
 +++ b/configure.ac
-@@ -202,6 +202,8 @@ vdpau_not_found="== Could not find libvdpau. VDPAU support disabled. =="
+@@ -188,6 +188,8 @@ vdpau_not_found="== Could not find libvdpau. VDPAU support disabled. =="
  vdpau_disabled="== VDPAU support manually disabled. =="
  vaapi_not_found="== Could not find libva. VAAPI support disabled. =="
  vaapi_disabled="== VAAPI support manually disabled. =="
@@ -9,7 +50,7 @@
  vtbdecoder_enabled="== VTBDecoder support enabled. =="
  vtbdecoder_disabled="== VTBDecoder support manually disabled. =="
  openmax_disabled="== OpenMax support manually disabled. =="
-@@ -288,6 +290,12 @@ AC_ARG_ENABLE([vaapi],
+@@ -276,6 +278,12 @@ AC_ARG_ENABLE([vaapi],
    [use_vaapi=$enableval],
    [use_vaapi=auto])
  
@@ -22,7 +63,7 @@
  AC_ARG_ENABLE([vtbdecoder],
    [AS_HELP_STRING([--enable-vtbdecoder],
    [enable VTBDecoder decoding (default is auto)])],
-@@ -653,6 +661,7 @@ case $host in
+@@ -609,6 +617,7 @@ case $host in
       use_joystick=no
       use_neon=yes
       use_libcec=no
@@ -30,7 +71,7 @@
       use_vtbdecoder=yes
       use_optical_drive=no
       use_dvdcss=no
-@@ -678,6 +687,7 @@ case $host in
+@@ -634,6 +643,7 @@ case $host in
    powerpc-apple-darwin*)
       use_joystick=no
       use_vtbdecoder=no
@@ -38,7 +79,7 @@
       ARCH="powerpc-osx"
       use_arch="ppc"
       DEPENDS_ROOT_FOR_XCODE=$(echo ${prefix%/*})
-@@ -1915,6 +1925,41 @@ else
+@@ -1815,6 +1825,41 @@ else
    USE_VAAPI=0
  fi
  
@@ -80,7 +121,7 @@
  # VTBDecoder
  if test "x$use_vtbdecoder" != "xno"; then
    if test "$host_vendor" = "apple" ; then
-@@ -2115,6 +2160,12 @@ else
+@@ -2015,6 +2060,12 @@ else
    final_message="$final_message\n  VAAPI:\tNo"
  fi
  
@@ -93,25 +134,26 @@
  if test "x$use_vtbdecoder" != "xno"; then
    final_message="$final_message\n  VTBDecoder:\tYes"
  else
-@@ -2659,6 +2710,7 @@ AC_SUBST(USE_OPENGL)
+@@ -2507,6 +2558,7 @@ AC_SUBST(USE_OPENGL)
  AC_SUBST(USE_OPENGLES)
  AC_SUBST(USE_VDPAU)
  AC_SUBST(USE_VAAPI)
 +AC_SUBST(USE_CRYSTALHD)
  AC_SUBST(USE_LIBSMBCLIENT)
  AC_SUBST(USE_LIBNFS)
- AC_SUBST(USE_AIRPLAY)
-
+ AC_SUBST(USE_LIBGIF)
+diff --git a/system/settings/settings.xml b/system/settings/settings.xml
+index 5a67d15..8fdda54 100644
 --- a/system/settings/settings.xml
 +++ b/system/settings/settings.xml
-@@ -811,6 +811,15 @@
+@@ -816,6 +816,15 @@
            <default>true</default>
            <control type="toggle" />
          </setting>
 +        <setting id="videoplayer.usechd" type="boolean" label="13428" help="36159">
 +          <requirement>HasCrystalHDDevice</requirement>
 +          <dependencies>
-+            <dependency type="enable" setting="videoplayer.rendermethod" operator="!is">3</dependency>
++            <dependency type="enable" setting="videoplayer.decodingmethod" operator="is">1</dependency>
 +          </dependencies>
 +          <level>2</level>
 +          <default>true</default>
@@ -120,10 +162,11 @@
          <setting id="videoplayer.useomx" type="boolean" label="13430" help="36161">
            <requirement>HAVE_LIBOPENMAX</requirement>
            <level>2</level>
-
+diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
+index 04e4032..9a2541f 100644
 --- a/xbmc/Application.cpp
 +++ b/xbmc/Application.cpp
-@@ -130,6 +130,9 @@
+@@ -133,6 +133,9 @@
  #ifdef HAS_JSONRPC
  #include "interfaces/json-rpc/JSONRPC.h"
  #endif
@@ -132,19 +175,19 @@
 +#endif
  #include "interfaces/AnnouncementManager.h"
  #include "peripherals/Peripherals.h"
- #include "peripherals/dialogs/GUIDialogPeripheralManager.h"
-@@ -1224,6 +1227,10 @@ bool CApplication::Initialize()
+ #include "peripherals/devices/PeripheralImon.h"
+@@ -1132,6 +1135,10 @@ bool CApplication::Initialize()
+   // initialize (and update as needed) our databases
+   CDatabaseManager::GetInstance().Initialize();
  
-   m_slowTimer.StartZero();
- 
-+#if defined(HAVE_LIBCRYSTALHD)
-+  CCrystalHD::GetInstance();
-+#endif
++  #if defined(HAVE_LIBCRYSTALHD)
++     CCrystalHD::GetInstance();
++  #endif
 +
-   CAddonMgr::Get().StartServices(true);
+   StartServices();
  
-   // register action listeners
-@@ -2676,6 +2683,10 @@ void CApplication::Stop(int exitCode)
+   // Init DPMS, before creating the corresponding setting control.
+@@ -3040,6 +3047,10 @@ void CApplication::Stop(int exitCode)
        XBMCHelper::GetInstance().Stop();
  #endif
  
@@ -155,7 +198,24 @@
      g_mediaManager.Stop();
  
      // Stop services before unloading Python
-
+diff --git a/xbmc/DllPaths_generated.h.in b/xbmc/DllPaths_generated.h.in
+index 5384a0b..627d788 100644
+--- a/xbmc/DllPaths_generated.h.in
++++ b/xbmc/DllPaths_generated.h.in
+@@ -59,4 +59,11 @@
+ /* sse4 */
+ #define DLL_PATH_LIBSSE4      "special://xbmcbin/system/libsse4-@ARCH@.so"
+ 
++/* broadcom crystalhd */
++#if defined(TARGET_DARWIN)
++#define DLL_PATH_LIBCRYSTALHD  "libcrystalhd.dylib"
++#else
++#define DLL_PATH_LIBCRYSTALHD  "@CRYSTALHD_SONAME@"
++#endif
++
+ #endif
+diff --git a/xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp b/xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp
+index 84e9ef1..fda1d24 100644
 --- a/xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp
 +++ b/xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp
 @@ -42,6 +42,9 @@
@@ -168,7 +228,7 @@
  #if defined(HAS_LIBAMCODEC)
  #include "utils/AMLUtils.h"
  #include "Video/DVDVideoCodecAmlogic.h"
-@@ -157,6 +160,11 @@ CDVDVideoCodec* CDVDFactoryCodec::CreateVideoCodec(CDVDStreamInfo &hint, const C
+@@ -154,6 +157,11 @@ CDVDVideoCodec* CDVDFactoryCodec::CreateVideoCodec(CDVDStreamInfo &hint, const C
  #elif defined(TARGET_DARWIN)
    hwSupport += "VideoToolBoxDecoder:no ";
  #endif
@@ -180,25 +240,18 @@
  #if defined(HAS_LIBAMCODEC)
    hwSupport += "AMCodec:yes ";
  #else
-@@ -269,6 +277,30 @@ CDVDVideoCodec* CDVDFactoryCodec::CreateVideoCodec(CDVDStreamInfo &hint, const C
+@@ -297,6 +305,23 @@ CDVDVideoCodec* CDVDFactoryCodec::CreateVideoCodec(CDVDStreamInfo &hint, const C
    }
  #endif
  
 +#if defined(HAVE_LIBCRYSTALHD)
-+  if (!hint.software && CSettings::Get().GetBool("videoplayer.usechd"))
++  if (!hint.software && CSettings::GetInstance().GetBool("videoplayer.usechd"))
 +  {
 +    if (CCrystalHD::GetInstance()->DevicePresent())
 +    {
 +      switch(hint.codec)
 +      {
-+        case AV_CODEC_ID_VC1:
-+        case AV_CODEC_ID_WMV3:
 +        case AV_CODEC_ID_H264:
-+        case AV_CODEC_ID_MPEG2VIDEO:
-+          if (hint.codec == AV_CODEC_ID_H264 && hint.ptsinvalid)
-+            break;
-+          if (hint.codec == AV_CODEC_ID_MPEG2VIDEO && hint.width <= 720)
-+            break;
 +          if ( (pCodec = OpenCodec(new CDVDVideoCodecCrystalHD(), hint, options)) ) return pCodec;
 +        break;
 +        default:
@@ -208,63 +261,15 @@
 +  }
 +#endif
 +
- #if defined(TARGET_ANDROID)
-   if (!hint.software && CSettings::Get().GetBool("videoplayer.usemediacodec"))
-   {
-
---- a/xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in
-+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in
-@@ -11,6 +11,10 @@ endif
- ifeq (@USE_VAAPI@,1)
- SRCS += VAAPI.cpp
- endif
-+ifeq (@USE_CRYSTALHD@,1)
-+SRCS += CrystalHD.cpp
-+SRCS += DVDVideoCodecCrystalHD.cpp
-+endif
- ifeq ($(findstring osx,@ARCH@),osx)
- SRCS += DVDVideoCodecVDA.cpp
- SRCS += VDA.cpp
-
---- a/xbmc/settings/SettingConditions.cpp
-+++ b/xbmc/settings/SettingConditions.cpp
-@@ -29,6 +29,9 @@
- #include "android/activity/AndroidFeatures.h"
- #endif // defined(TARGET_ANDROID)
- #include "cores/AudioEngine/AEFactory.h"
-+#if defined(HAVE_LIBCRYSTALHD)
-+#include "cores/dvdplayer/DVDCodecs/Video/CrystalHD.h"
-+#endif // defined(HAVE_LIBCRYSTALHD)
- #include "cores/dvdplayer/DVDCodecs/Video/DVDVideoCodec.h"
- #include "guilib/LocalizeStrings.h"
- #include "peripherals/Peripherals.h"
-@@ -224,6 +227,11 @@ void CSettingConditions::Initialize()
- #ifdef HAS_ZEROCONF
-   m_simpleConditions.insert("has_zeroconf");
- #endif
-+#ifdef HAVE_LIBCRYSTALHD
-+  m_simpleConditions.insert("have_libcrystalhd");
-+  if (CCrystalHD::GetInstance()->DevicePresent())
-+    m_simpleConditions.insert("hascrystalhddevice");
-+#endif
- #ifdef HAVE_LIBOPENMAX
-   m_simpleConditions.insert("have_libopenmax");
- #endif
-
---- a/xbmc/system.h
-+++ b/xbmc/system.h
-@@ -106,6 +106,7 @@
- #define HAS_WIN32_NETWORK
- #define HAS_IRSERVERSUITE
- #define HAS_AUDIO
-+#define HAVE_LIBCRYSTALHD 2
- #define HAS_WEB_SERVER
- #define HAS_WEB_INTERFACE
- #define HAVE_LIBSSH
-
+ #if defined(HAVE_LIBOPENMAX)
+     if (CSettings::GetInstance().GetBool(CSettings::SETTING_VIDEOPLAYER_USEOMX) && !hint.software )
+     {
+diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD.cpp b/xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD.cpp
+new file mode 100644
+index 0000000..586b45b
 --- /dev/null
-+++ a/xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD.cpp
-@@ -0,0 +1,2011 @@
++++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD.cpp
+@@ -0,0 +1,2010 @@
 +/*
 + *      Copyright (C) 2005-2013 Team XBMC
 + *      http://xbmc.org
@@ -302,7 +307,6 @@
 +#include "threads/Atomics.h"
 +#include "threads/Thread.h"
 +#include "utils/log.h"
-+#include "utils/fastmemcpy.h"
 +extern "C" {
 +#include "libswscale/swscale.h"
 +}
@@ -926,14 +930,14 @@
 +  // copy y
 +  if (w == stride)
 +  {
-+    fast_memcpy(pBuffer->m_y_buffer_ptr, procOut->Ybuff, w * h);
++    memcpy(pBuffer->m_y_buffer_ptr, procOut->Ybuff, w * h);
 +  }
 +  else
 +  {
 +    uint8_t *s_y = procOut->Ybuff;
 +    uint8_t *d_y = pBuffer->m_y_buffer_ptr;
 +    for (int y = 0; y < h; y++, s_y += stride, d_y += w)
-+      fast_memcpy(d_y, s_y, w);
++      memcpy(d_y, s_y, w);
 +  }
 +  //copy chroma
 +  //copy uv packed to u,v planes (1/2 the width and 1/2 the height of y)
@@ -957,9 +961,9 @@
 +  uint8_t *d_y = pBuffer->m_y_buffer_ptr;
 +  for (int y = 0; y < h/2; y++, s_y += stride)
 +  {
-+    fast_memcpy(d_y, s_y, w);
++    memcpy(d_y, s_y, w);
 +    d_y += w;
-+    fast_memcpy(d_y, s_y, w);
++    memcpy(d_y, s_y, w);
 +    d_y += w;
 +  }
 +  //copy chroma
@@ -991,9 +995,9 @@
 +  {
 +    int bytes = w * h;
 +    // copy y
-+    fast_memcpy(pBuffer->m_y_buffer_ptr, procOut->Ybuff, bytes);
++    memcpy(pBuffer->m_y_buffer_ptr, procOut->Ybuff, bytes);
 +    // copy uv
-+    fast_memcpy(pBuffer->m_uv_buffer_ptr, procOut->UVbuff, bytes/2 );
++    memcpy(pBuffer->m_uv_buffer_ptr, procOut->UVbuff, bytes/2 );
 +  }
 +  else
 +  {
@@ -1001,12 +1005,12 @@
 +    uint8_t *s = procOut->Ybuff;
 +    uint8_t *d = pBuffer->m_y_buffer_ptr;
 +    for (int y = 0; y < h; y++, s += stride, d += w)
-+      fast_memcpy(d, s, w);
++      memcpy(d, s, w);
 +    // copy uv
 +    s = procOut->UVbuff;
 +    d = pBuffer->m_uv_buffer_ptr;
 +    for (int y = 0; y < h/2; y++, s += stride, d += w)
-+      fast_memcpy(d, s, w);
++      memcpy(d, s, w);
 +  }
 +}
 +
@@ -1018,18 +1022,18 @@
 +  uint8_t *d_y = pBuffer->m_y_buffer_ptr;
 +  for (int y = 0; y < h/2; y++, s_y += stride)
 +  {
-+    fast_memcpy(d_y, s_y, w);
++    memcpy(d_y, s_y, w);
 +    d_y += w;
-+    fast_memcpy(d_y, s_y, w);
++    memcpy(d_y, s_y, w);
 +    d_y += w;
 +  }
 +  //copy chroma
 +  uint8_t *s_uv = procOut->UVbuff;
 +  uint8_t *d_uv = pBuffer->m_uv_buffer_ptr;
 +  for (int y = 0; y < h/4; y++, s_uv += stride) {
-+    fast_memcpy(d_uv, s_uv, w);
++    memcpy(d_uv, s_uv, w);
 +    d_uv += w;
-+    fast_memcpy(d_uv, s_uv, w);
++    memcpy(d_uv, s_uv, w);
 +    d_uv += w;
 +  }
 +  pBuffer->m_interlace = false;
@@ -1193,16 +1197,16 @@
 +                  uint8_t *d_y = pBuffer->m_y_buffer_ptr;
 +                  for (int y = 0; y < h/2; y++, s_y += yuy2_stride)
 +                  {
-+                    fast_memcpy(d_y, s_y, yuy2_w);
++                    memcpy(d_y, s_y, yuy2_w);
 +                    d_y += yuy2_w;
-+                    fast_memcpy(d_y, s_y, yuy2_w);
++                    memcpy(d_y, s_y, yuy2_w);
 +                    d_y += yuy2_w;
 +                  }
 +                  pBuffer->m_interlace = false;
 +                }
 +                else
 +                {
-+                  fast_memcpy(pBuffer->m_y_buffer_ptr,  procOut.Ybuff, pBuffer->m_y_buffer_size);
++                  memcpy(pBuffer->m_y_buffer_ptr,  procOut.Ybuff, pBuffer->m_y_buffer_size);
 +                }
 +              break;
 +              case RENDER_FMT_YUV420P:
@@ -2276,9 +2280,11 @@
 +}
 +
 +#endif
-
+diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD.h b/xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD.h
+new file mode 100644
+index 0000000..451a107
 --- /dev/null
-+++ a/xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD.h
++++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/CrystalHD.h
 @@ -0,0 +1,236 @@
 +#pragma once
 +/*
@@ -2516,9 +2522,11 @@
 +};
 +
 +#endif
-
+diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecCrystalHD.cpp b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecCrystalHD.cpp
+new file mode 100644
+index 0000000..56f0ae0
 --- /dev/null
-+++ a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecCrystalHD.cpp
++++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecCrystalHD.cpp
 @@ -0,0 +1,204 @@
 +/*
 + *      Copyright (C) 2005-2013 Team XBMC
@@ -2575,7 +2583,7 @@
 +
 +bool CDVDVideoCodecCrystalHD::Open(CDVDStreamInfo &hints, CDVDCodecOptions &options)
 +{
-+  if (CSettings::Get().GetBool("videoplayer.usechd") && !hints.software)
++  if (CSettings::GetInstance().GetBool("videoplayer.usechd") && !hints.software)
 +  {
 +    switch (hints.codec)
 +    {
@@ -2608,7 +2616,7 @@
 +        else
 +          m_CodecType = CRYSTALHD_CODEC_ID_H264;
 +
-+        m_pFormatName = "chd-h264";
++        m_pFormatName = "chd-h264-osmc";
 +      break;
 +      case AV_CODEC_ID_VC1:
 +        m_CodecType = CRYSTALHD_CODEC_ID_VC1;
@@ -2724,9 +2732,11 @@
 +}
 +
 +#endif
-
+diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecCrystalHD.h b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecCrystalHD.h
+new file mode 100644
+index 0000000..cc36c29
 --- /dev/null
-+++ a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecCrystalHD.h
++++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecCrystalHD.h
 @@ -0,0 +1,51 @@
 +/*
 + *      Copyright (C) 2005-2013 Team XBMC
@@ -2779,35 +2789,59 @@
 +};
 +
 +#endif
-
---- a/xbmc/DllPaths_generated.h.in      2015-07-14 17:02:34.082299228 +0400
-+++ b/xbmc/DllPaths_generated.h.in      2015-07-14 16:54:38.284561398 +0400
-@@ -76,6 +76,9 @@
- /* libbluray */
- #define DLL_PATH_LIBBLURAY     "libbluray.so.1"
- 
-+/* broadcom crystalhd */
-+#define DLL_PATH_LIBCRYSTALHD "@CRYSTALHD_SONAME@"
-+
- /* wayland */
- #define DLL_PATH_WAYLAND_CLIENT ""
- #define DLL_PATH_WAYLAND_EGL ""
-
---- a/xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp
-+++ b/xbmc/cores/dvdplayer/DVDCodecs/DVDFactoryCodec.cpp
-@@ -284,14 +284,9 @@ CDVDVideoCodec* CDVDFactoryCodec::CreateVideoCodec(CDVDStreamInfo &hint, const C
-     {
-       switch(hint.codec)
-       {
--        case AV_CODEC_ID_VC1:
--        case AV_CODEC_ID_WMV3:
-         case AV_CODEC_ID_H264:
--        case AV_CODEC_ID_MPEG2VIDEO:
-           if (hint.codec == AV_CODEC_ID_H264 && hint.ptsinvalid)
-             break;
--          if (hint.codec == AV_CODEC_ID_MPEG2VIDEO && hint.width <= 720)
--            break;
-           if ( (pCodec = OpenCodec(new CDVDVideoCodecCrystalHD(), hint, options)) ) return pCodec;
-         break;
-         default:
+diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in b/xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in
+index 56ec6a3..5592bfe 100644
+--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in
++++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile.in
+@@ -11,6 +11,10 @@ endif
+ ifeq (@USE_VAAPI@,1)
+ SRCS += VAAPI.cpp
+ endif
++ifeq (@USE_CRYSTALHD@,1)
++SRCS += CrystalHD.cpp
++SRCS += DVDVideoCodecCrystalHD.cpp
++endif
+ ifeq ($(findstring osx,@ARCH@),osx)
+ SRCS += DVDVideoCodecVDA.cpp
+ SRCS += VDA.cpp
+diff --git a/xbmc/settings/SettingConditions.cpp b/xbmc/settings/SettingConditions.cpp
+index ed62e42..63b6c66 100644
+--- a/xbmc/settings/SettingConditions.cpp
++++ b/xbmc/settings/SettingConditions.cpp
+@@ -29,6 +29,9 @@
+ #include "android/activity/AndroidFeatures.h"
+ #endif // defined(TARGET_ANDROID)
+ #include "cores/AudioEngine/AEFactory.h"
++#if defined(HAVE_LIBCRYSTALHD)
++#include "cores/dvdplayer/DVDCodecs/Video/CrystalHD.h"
++#endif // defined(HAVE_LIBCRYSTALHD)
+ #include "cores/dvdplayer/DVDCodecs/Video/DVDVideoCodec.h"
+ #include "guilib/LocalizeStrings.h"
+ #include "peripherals/Peripherals.h"
+@@ -221,6 +224,11 @@ void CSettingConditions::Initialize()
+ #ifdef HAS_ZEROCONF
+   m_simpleConditions.insert("has_zeroconf");
+ #endif
++#ifdef HAVE_LIBCRYSTALHD
++  m_simpleConditions.insert("have_libcrystalhd");
++  if (CCrystalHD::GetInstance()->DevicePresent())
++    m_simpleConditions.insert("hascrystalhddevice");
++#endif
+ #ifdef HAVE_LIBOPENMAX
+   m_simpleConditions.insert("have_libopenmax");
+ #endif
+diff --git a/xbmc/system.h b/xbmc/system.h
+index 8e8b2f9..df8bccb 100644
+--- a/xbmc/system.h
++++ b/xbmc/system.h
+@@ -109,6 +109,7 @@
+ #define HAS_WIN32_NETWORK
+ #define HAS_IRSERVERSUITE
+ #define HAS_AUDIO
++#define HAVE_LIBCRYSTALHD 2
+ #define HAS_WEB_SERVER
+ #define HAS_WEB_INTERFACE
+ #define HAVE_LIBSSH
+-- 
+2.1.0
 
