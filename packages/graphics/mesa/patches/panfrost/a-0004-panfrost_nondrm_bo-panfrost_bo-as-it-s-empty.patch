From 2363a3be0a8d999b4fcccfde4fc4808a8fca758e Mon Sep 17 00:00:00 2001
From: Alyssa Rosenzweig <alyssa@rosenzweig.io>
Date: Thu, 7 Feb 2019 05:45:47 +0000
Subject: [PATCH 04/19] panfrost_nondrm_bo -> panfrost_bo as it's empty

---
 pan_nondrm.c | 82 +++++++++++++++++++++++++---------------------------
 1 file changed, 39 insertions(+), 43 deletions(-)

diff --git a/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c b/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c
index 5c087fa..f78daba 100644
--- a/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c
+++ b/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c
@@ -50,10 +50,6 @@ struct panfrost_nondrm {
 	int fd;
 };
 
-struct panfrost_nondrm_bo {
-	struct panfrost_bo base;
-};
-
 static int
 pandev_ioctl(int fd, unsigned long request, void *args)
 {
@@ -88,7 +84,7 @@ pandev_general_allocate(int fd, int va_pages, int commit_pages,
 static struct panfrost_bo *
 panfrost_nondrm_create_bo(struct panfrost_screen *screen, const struct pipe_resource *template)
 {
-	struct panfrost_nondrm_bo *bo = CALLOC_STRUCT(panfrost_nondrm_bo);
+	struct panfrost_bo *bo = CALLOC_STRUCT(panfrost_bo);
         int bytes_per_pixel = util_format_get_blocksize(template->format);
         int stride = bytes_per_pixel * template->width0; /* TODO: Alignment? */
         size_t sz = stride;
@@ -106,20 +102,20 @@ panfrost_nondrm_create_bo(struct panfrost_screen *screen, const struct pipe_reso
 		screen->driver->allocate_slab(screen, &slab, (sz / 4096) + 1, false, 0, 0, 0);
 
 		/* Make the resource out of the slab */
-		bo->base.cpu[0] = slab.cpu;
-		bo->base.gpu[0] = slab.gpu;
+		bo->cpu[0] = slab.cpu;
+		bo->gpu[0] = slab.gpu;
 	} else {
                 /* TODO: For linear resources, allocate straight on the cmdstream for
                  * zero-copy operation */
 
                 /* Tiling textures is almost always faster, unless we only use it once */
-                bo->base.tiled = (template->usage != PIPE_USAGE_STREAM) && (template->bind & PIPE_BIND_SAMPLER_VIEW);
+                bo->tiled = (template->usage != PIPE_USAGE_STREAM) && (template->bind & PIPE_BIND_SAMPLER_VIEW);
 
-                if (bo->base.tiled) {
+                if (bo->tiled) {
                         /* For tiled, we don't map directly, so just malloc any old buffer */
 
                         for (int l = 0; l < (template->last_level + 1); ++l) {
-                                bo->base.cpu[l] = malloc(sz);
+                                bo->cpu[l] = malloc(sz);
                                 //sz >>= 2;
                         }
                 } else {
@@ -128,21 +124,21 @@ panfrost_nondrm_create_bo(struct panfrost_screen *screen, const struct pipe_reso
                         struct pb_slab_entry *entry = pb_slab_alloc(&screen->slabs, sz, HEAP_TEXTURE);
                         struct panfrost_memory_entry *p_entry = (struct panfrost_memory_entry *) entry;
                         struct panfrost_memory *backing = (struct panfrost_memory *) entry->slab;
-                        bo->base.entry[0] = p_entry;
-                        bo->base.cpu[0] = backing->cpu + p_entry->offset;
-                        bo->base.gpu[0] = backing->gpu + p_entry->offset;
+                        bo->entry[0] = p_entry;
+                        bo->cpu[0] = backing->cpu + p_entry->offset;
+                        bo->gpu[0] = backing->gpu + p_entry->offset;
 
                         /* TODO: Mipmap */
                 }
 	}
 
-        return &bo->base;
+        return bo;
 }
 
 static struct panfrost_bo *
 panfrost_nondrm_import_bo(struct panfrost_screen *screen, struct winsys_handle *whandle)
 {
-	struct panfrost_nondrm_bo *bo = CALLOC_STRUCT(panfrost_nondrm_bo);
+	struct panfrost_bo *bo = CALLOC_STRUCT(panfrost_bo);
 	struct panfrost_nondrm *nondrm = (struct panfrost_nondrm *)screen->driver;
         struct drm_mode_map_dumb map_arg;
         int ret;
@@ -162,7 +158,7 @@ panfrost_nondrm_import_bo(struct panfrost_screen *screen, struct winsys_handle *
         ret = pandev_ioctl(nondrm->fd, KBASE_IOCTL_MEM_IMPORT, &framebuffer_import);
         assert(ret == 0);
 
-        bo->base.gpu[0] = (mali_ptr) (uintptr_t) mmap(NULL, framebuffer_import.out.va_pages * 4096, PROT_READ | PROT_WRITE, MAP_SHARED, nondrm->fd, framebuffer_import.out.gpu_va);
+        bo->gpu[0] = (mali_ptr) (uintptr_t) mmap(NULL, framebuffer_import.out.va_pages * 4096, PROT_READ | PROT_WRITE, MAP_SHARED, nondrm->fd, framebuffer_import.out.gpu_va);
 
         ret = drmPrimeFDToHandle(screen->ro->kms_fd, whandle->handle, &gem_handle);
         assert(ret >= 0);
@@ -173,10 +169,10 @@ panfrost_nondrm_import_bo(struct panfrost_screen *screen, struct winsys_handle *
         ret = drmIoctl(screen->ro->kms_fd, DRM_IOCTL_MODE_MAP_DUMB, &map_arg);
         assert(!ret);
 
-        bo->base.cpu[0] = mmap(NULL, framebuffer_import.out.va_pages * 4096, PROT_READ | PROT_WRITE, MAP_SHARED, screen->ro->kms_fd, map_arg.offset);
+        bo->cpu[0] = mmap(NULL, framebuffer_import.out.va_pages * 4096, PROT_READ | PROT_WRITE, MAP_SHARED, screen->ro->kms_fd, map_arg.offset);
 
         u64 addresses[1];
-        addresses[0] = bo->base.gpu[0];
+        addresses[0] = bo->gpu[0];
         struct kbase_ioctl_sticky_resource_map map = {
                 .count = 1,
                 .address = (u64) (uintptr_t) addresses,
@@ -184,18 +180,18 @@ panfrost_nondrm_import_bo(struct panfrost_screen *screen, struct winsys_handle *
         ret = pandev_ioctl(nondrm->fd, KBASE_IOCTL_STICKY_RESOURCE_MAP, &map);
         assert(ret == 0);
         
-        return &bo->base;
+        return bo;
 }
 
 static uint8_t *
 panfrost_nondrm_map_bo(struct panfrost_context *ctx, struct pipe_transfer *transfer)
 {
-	struct panfrost_nondrm_bo *bo = (struct panfrost_nondrm_bo *)pan_resource(transfer->resource)->bo;
+	struct panfrost_bo *bo = (struct panfrost_bo *)pan_resource(transfer->resource)->bo;
 
         /* If non-zero level, it's a mipmapped resource and needs to be treated as such */
-        bo->base.is_mipmap |= transfer->level;
+        bo->is_mipmap |= transfer->level;
 
-        if (transfer->usage & PIPE_TRANSFER_MAP_DIRECTLY && bo->base.tiled) {
+        if (transfer->usage & PIPE_TRANSFER_MAP_DIRECTLY && bo->tiled) {
                 /* We cannot directly map tiled textures */
                 return NULL;
         }
@@ -205,16 +201,16 @@ panfrost_nondrm_map_bo(struct panfrost_context *ctx, struct pipe_transfer *trans
                 assert(transfer->level == 0);
 
                 /* Set the CPU mapping to that of the depth/stencil buffer in memory, untiled */
-                bo->base.cpu[transfer->level] = ctx->depth_stencil_buffer.cpu;
+                bo->cpu[transfer->level] = ctx->depth_stencil_buffer.cpu;
         }
 
-        return bo->base.cpu[transfer->level];
+        return bo->cpu[transfer->level];
 }
 
 static void
 panfrost_tile_texture(struct panfrost_screen *screen, struct panfrost_resource *rsrc, int level)
 {
-	struct panfrost_nondrm_bo *bo = (struct panfrost_nondrm_bo *)rsrc->bo;
+	struct panfrost_bo *bo = (struct panfrost_bo *)rsrc->bo;
         int bytes_per_pixel = util_format_get_blocksize(rsrc->base.format);
         int stride = bytes_per_pixel * rsrc->base.width0; /* TODO: Alignment? */
 
@@ -235,34 +231,34 @@ panfrost_tile_texture(struct panfrost_screen *screen, struct panfrost_resource *
         /* Save the entry. But if there was already an entry here (from a
          * previous upload of the resource), free that one so we don't leak */
 
-        if (bo->base.entry[level] != NULL) {
-                bo->base.entry[level]->freed = true;
-                pb_slab_free(&screen->slabs, &bo->base.entry[level]->base);
+        if (bo->entry[level] != NULL) {
+                bo->entry[level]->freed = true;
+                pb_slab_free(&screen->slabs, &bo->entry[level]->base);
         }
 
-        bo->base.entry[level] = p_entry;
-        bo->base.gpu[level] = backing->gpu + p_entry->offset;
+        bo->entry[level] = p_entry;
+        bo->gpu[level] = backing->gpu + p_entry->offset;
 
         /* Run actual texture swizzle, writing directly to the mapped
          * GPU chunk we allocated */
 
-        panfrost_texture_swizzle(width, height, bytes_per_pixel, stride, bo->base.cpu[level], swizzled);
+        panfrost_texture_swizzle(width, height, bytes_per_pixel, stride, bo->cpu[level], swizzled);
 }
 
 static void
 panfrost_nondrm_unmap_bo(struct panfrost_context *ctx,
                          struct pipe_transfer *transfer)
 {
-	struct panfrost_nondrm_bo *bo = (struct panfrost_nondrm_bo *)pan_resource(transfer->resource)->bo;
+	struct panfrost_bo *bo = (struct panfrost_bo *)pan_resource(transfer->resource)->bo;
 
         if (transfer->usage & PIPE_TRANSFER_WRITE) {
                 if (transfer->resource->target == PIPE_TEXTURE_2D) {
                         struct panfrost_resource *prsrc = (struct panfrost_resource *) transfer->resource;
 
                         /* Gallium thinks writeback happens here; instead, this is our cue to tile */
-                        if (bo->base.has_afbc) {
+                        if (bo->has_afbc) {
                                 printf("Warning: writes to afbc surface can't possibly work out well for you...\n");
-                        } else if (bo->base.tiled) {
+                        } else if (bo->tiled) {
                                 struct pipe_context *gallium = (struct pipe_context *) ctx;
                                 struct panfrost_screen *screen = pan_screen(gallium->screen);
                                 panfrost_tile_texture(screen, prsrc, transfer->level);
@@ -274,27 +270,27 @@ panfrost_nondrm_unmap_bo(struct panfrost_context *ctx,
 static void
 panfrost_nondrm_destroy_bo(struct panfrost_screen *screen, struct panfrost_bo *pbo)
 {
-	struct panfrost_nondrm_bo *bo = (struct panfrost_nondrm_bo *)pbo;
+	struct panfrost_bo *bo = (struct panfrost_bo *)pbo;
 
-        if (bo->base.tiled) {
+        if (bo->tiled) {
                 /* CPU is all malloc'ed, so just plain ol' free needed */
 
-                for (int l = 0; bo->base.cpu[l]; l++) {
-                        free(bo->base.cpu[l]);
+                for (int l = 0; bo->cpu[l]; l++) {
+                        free(bo->cpu[l]);
                 }
-        } else if (bo->base.entry[0] != NULL) {
-                bo->base.entry[0]->freed = true;
-                pb_slab_free(&screen->slabs, &bo->base.entry[0]->base);
+        } else if (bo->entry[0] != NULL) {
+                bo->entry[0]->freed = true;
+                pb_slab_free(&screen->slabs, &bo->entry[0]->base);
         } else {
                 printf("--leaking main allocation--\n");
         }
 
-        if (bo->base.has_afbc) {
+        if (bo->has_afbc) {
                 /* TODO */
                 printf("--leaking afbc--\n");
         }
 
-        if (bo->base.has_checksum) {
+        if (bo->has_checksum) {
                 /* TODO */
                 printf("--leaking afbc--\n");
         }
-- 
2.17.1

