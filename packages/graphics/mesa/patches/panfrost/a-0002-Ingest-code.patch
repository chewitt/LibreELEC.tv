From 3c156c9eae066afa1412fe7b0a9e1d33ae5d2dac Mon Sep 17 00:00:00 2001
From: Alyssa Rosenzweig <alyssa@rosenzweig.io>
Date: Tue, 5 Feb 2019 05:31:59 +0000
Subject: [PATCH 02/19] Ingest code

---
 pan_nondrm.c | 76 ++++++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 71 insertions(+), 5 deletions(-)

diff --git a/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c b/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c
index c8dcd71..8005647 100644
--- a/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c
+++ b/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c
@@ -308,13 +308,72 @@ panfrost_nondrm_destroy_bo(struct panfrost_screen *screen, struct panfrost_bo *p
         }
 }
 
-static void
-panfrost_nondrm_submit_job(struct panfrost_context *ctx, mali_ptr addr, int nr_atoms)
+/* Use to allocate atom numbers for jobs. We probably want to overhaul this in kernel space at some point. */
+uint8_t atom_counter = 0;
+
+static uint8_t
+allocate_atom()
+{
+        atom_counter++;
+
+        /* Workaround quirk where atoms must be strictly positive */
+
+        if (atom_counter == 0)
+                atom_counter++;
+
+        return atom_counter;
+}
+
+static int
+panfrost_nondrm_submit_vs_fs_job(struct panfrost_context *ctx, bool has_draws, bool is_scanout)
 {
         struct pipe_context *gallium = (struct pipe_context *) ctx;
         struct panfrost_screen *screen = panfrost_screen(gallium->screen);
 	struct panfrost_nondrm *nondrm = (struct panfrost_nondrm *)screen->driver;
 
+        struct pipe_surface *surf = ctx->pipe_framebuffer.cbufs[0];
+
+        base_external_resource framebuffer[] = {
+                {.ext_resource = surf ? (((struct panfrost_resource *) surf->texture)->bo->gpu[0] | (BASE_EXT_RES_ACCESS_EXCLUSIVE & LOCAL_PAGE_LSB)) : 0},
+        };
+
+        int vt_atom = allocate_atom();
+
+        struct base_jd_atom_v2 atoms[] = {
+                {
+                        .jc = ctx->set_value_job,
+                        .atom_number = vt_atom,
+                        .core_req = BASE_JD_REQ_CS | BASE_JD_REQ_T | BASE_JD_REQ_CF | BASE_JD_REQ_COHERENT_GROUP | BASEP_JD_REQ_EVENT_NEVER,
+                },
+                {
+                        .jc = panfrost_fragment_job(ctx),
+                        .nr_extres = 1,
+                        .extres_list = (u64)framebuffer,
+                        .atom_number = allocate_atom(),
+                        .core_req = BASE_JD_REQ_FS,
+                },
+        };
+
+        if (screen->last_fragment_id != -1) {
+                atoms[0].pre_dep[0].atom_id = screen->last_fragment_id;
+                atoms[0].pre_dep[0].dependency_type = BASE_JD_DEP_TYPE_ORDER;
+        }
+
+        if (has_draws) {
+                atoms[1].pre_dep[0].atom_id = vt_atom;
+                atoms[1].pre_dep[0].dependency_type = BASE_JD_DEP_TYPE_DATA;
+        }
+
+        atoms[1].core_req |= is_scanout ? BASE_JD_REQ_EXTERNAL_RESOURCES : BASE_JD_REQ_FS_AFBC;
+
+        /* Copy over core reqs for old kernels */
+
+        for (int i = 0; i < 2; ++i)
+                atoms[i].compat_core_req = atoms[i].core_req;
+
+        mali_ptr addr = (mali_ptr) (atoms + (has_draws ? 0 : 1));
+        unsigned nr_atoms = has_draws ? 2 : 1;
+
         struct kbase_ioctl_job_submit submit = {
                 .addr = addr,
                 .nr_atoms = nr_atoms,
@@ -331,6 +390,9 @@ panfrost_nondrm_submit_job(struct panfrost_context *ctx, mali_ptr addr, int nr_a
                 return;
         }
 #endif
+
+        /* Return fragment ID */
+        return atoms[1].atom_number;
 }
 
 /* Forces a flush, to make sure everything is consistent.
@@ -379,10 +441,14 @@ panfrost_nondrm_allocate_slab(struct panfrost_screen *screen,
                     BASE_MEM_COHERENT_LOCAL;
         int out_flags;
 
-        flags |= extra_flags;
+        if (extra_flags & PAN_ALLOCATE_EXECUTE)
+                flags |= BASE_MEM_PROT_GPU_EX;
+
+        if (extra_flags & PAN_ALLOCATE_GROWABLE)
+                flags |= BASE_MEM_GROW_ON_GPF;
 
         /* w+x are mutually exclusive */
-        if (extra_flags & BASE_MEM_PROT_GPU_EX)
+        if (flags & BASE_MEM_PROT_GPU_EX)
                 flags &= ~BASE_MEM_PROT_GPU_WR;
 
         if (same_va)
@@ -447,7 +513,7 @@ panfrost_create_nondrm_driver(int fd)
 	driver->base.map_bo = panfrost_nondrm_map_bo;
 	driver->base.unmap_bo = panfrost_nondrm_unmap_bo;
 	driver->base.destroy_bo = panfrost_nondrm_destroy_bo;
-	driver->base.submit_job = panfrost_nondrm_submit_job;
+	driver->base.submit_vs_fs_job = panfrost_nondrm_submit_vs_fs_job;
 	driver->base.force_flush_fragment = panfrost_nondrm_force_flush_fragment;
 	driver->base.allocate_slab = panfrost_nondrm_allocate_slab;
 	driver->base.enable_counters = panfrost_nondrm_enable_counters;
-- 
2.17.1

