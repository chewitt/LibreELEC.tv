From 20c92bc45c76513e60efe6fffcf698316fbe4c33 Mon Sep 17 00:00:00 2001
From: Tomeu Vizoso <tomeu.vizoso@collabora.com>
Date: Mon, 4 Mar 2019 15:22:50 +0100
Subject: [PATCH 14/19] Implement query_version callback

Signed-off-by: Tomeu Vizoso <tomeu.vizoso@collabora.com>
Reviewed-by: Alyssa Rosenzweig <alyssa@rosenzweig.io>
---
 pan_nondrm.c | 50 ++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 50 insertions(+)

diff --git a/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c b/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c
index 959de81..b5335e4 100644
--- a/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c
+++ b/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c
@@ -389,6 +389,55 @@ panfrost_nondrm_dump_counters(struct panfrost_screen *screen)
         }
 }
 
+static unsigned
+panfrost_nondrm_query_gpu_version(struct panfrost_screen *screen)
+{
+	struct panfrost_nondrm *nondrm = (struct panfrost_nondrm *) screen->driver;
+	struct kbase_ioctl_get_gpuprops get_gpuprops = {0,};
+	char buf[1024];
+	char *ptr;
+	int size;
+
+        get_gpuprops.buffer = buf;
+        get_gpuprops.size = sizeof(buf);
+        size = pandev_ioctl(nondrm->fd, KBASE_IOCTL_GET_GPUPROPS, &get_gpuprops);
+        if (size < 1 || size > get_gpuprops.size) {
+                fprintf(stderr, "Error getting GPU props: %m\n");
+                return 0x0;
+        }
+
+        ptr = buf;
+        while (ptr < buf + size) {
+                u32 key = *((u32 *)ptr);
+                u8 type = key & 3;
+                key = key >> 2;
+
+                ptr += 4;
+
+                if (key == KBASE_GPUPROP_PRODUCT_ID)
+                        return *((u32 *)ptr);
+
+                switch (type) {
+                case KBASE_GPUPROP_VALUE_SIZE_U8:
+                        ptr += 1;
+                        break;
+                case KBASE_GPUPROP_VALUE_SIZE_U16:
+                        ptr += 2;
+                        break;
+                case KBASE_GPUPROP_VALUE_SIZE_U32:
+                        ptr += 4;
+                        break;
+                case KBASE_GPUPROP_VALUE_SIZE_U64:
+                        ptr += 8;
+                        break;
+                default:
+                        assert(0);
+                }
+        }
+
+        return 0x0;
+}
+
 struct panfrost_driver *
 panfrost_create_nondrm_driver(int fd)
 {
@@ -407,6 +456,7 @@ panfrost_create_nondrm_driver(int fd)
 	driver->base.free_imported_bo = panfrost_nondrm_free_imported_bo;
 	driver->base.enable_counters = panfrost_nondrm_enable_counters;
 	driver->base.dump_counters = panfrost_nondrm_dump_counters;
+	driver->base.query_gpu_version = panfrost_nondrm_query_gpu_version;
 
         ret = ioctl(fd, KBASE_IOCTL_VERSION_CHECK, &version);
         if (ret != 0) {
-- 
2.17.1

