From f2469fed72e829980f7432b6059686750b80308d Mon Sep 17 00:00:00 2001
From: Alyssa Rosenzweig <alyssa@rosenzweig.io>
Date: Tue, 19 Feb 2019 03:17:21 +0000
Subject: [PATCH 09/19] Remove legacy header; memory flags, dump_counters

Signed-off-by: Alyssa Rosenzweig <alyssa@rosenzweig.io>
---
 include/meson.build                   | 16 ----------
 include/panfrost-mali-base.h.meson.in | 44 ---------------------------
 pan_nondrm.c                          | 33 +++++++++++++-------
 3 files changed, 22 insertions(+), 71 deletions(-)
 delete mode 100644 include/meson.build
 delete mode 100644 include/panfrost-mali-base.h.meson.in

diff --git a/src/gallium/drivers/panfrost/nondrm/include/meson.build b/src/gallium/drivers/panfrost/nondrm/include/meson.build
deleted file mode 100644
index 10b6856..0000000
--- a/src/gallium/drivers/panfrost/nondrm/include/meson.build
+++ /dev/null
@@ -1,16 +0,0 @@
-kbase_conf_data = configuration_data()
-
-kbase_conf_data.set('PAGE_SHIFT', cc.run('''
-  #include <unistd.h>
-  #include <stdio.h>
-  #include <math.h>
-
-  int main() {
-      printf("%.0f", log2f(sysconf(_SC_PAGESIZE)));
-      return 0;
-  }''', dependencies : dep_m).stdout(),
-  name : 'PAGE_SHIFT')
-
-configure_file(output : 'panfrost-mali-base.h',
-               input : 'panfrost-mali-base.h.meson.in',
-               configuration : kbase_conf_data)
diff --git a/src/gallium/drivers/panfrost/nondrm/include/panfrost-mali-base.h.meson.in b/src/gallium/drivers/panfrost/nondrm/include/panfrost-mali-base.h.meson.in
deleted file mode 100644
index 880b3fe..0000000
--- a/src/gallium/drivers/panfrost/nondrm/include/panfrost-mali-base.h.meson.in
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Â© Copyright 2017-2018 The Panfrost Community
- *
- * Permission is hereby granted, free of charge, to any person obtaining a
- * copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice (including the next
- * paragraph) shall be included in all copies or substantial portions of the
- * Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
- * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
- * SOFTWARE.
- *
- * The bridge between our world, and ARM's. For the *_base_* headers, anyway.
- *
- */
-
-#ifndef PANFROST_MALI_BASE_H
-#define PANFROST_MALI_BASE_H
-
-#include <assert.h>
-#include <stddef.h>
-#include <util/macros.h>
-
-#include <panfrost-misc.h>
-
-#define KBASE_DEBUG_ASSERT assert
-
-#mesondefine PAGE_SHIFT
-#define PAGE_SIZE (1UL << PAGE_SHIFT)
-#define PAGE_MASK (~(PAGE_SIZE-1))
-
-#include <mali_base_kernel.h>
-
-#endif /* !PANFROST_MALI_BASE_H */
diff --git a/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c b/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c
index b078d51..9994783 100644
--- a/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c
+++ b/src/gallium/drivers/panfrost/nondrm/pan_nondrm.c
@@ -207,14 +207,6 @@ panfrost_nondrm_submit_vs_fs_job(struct panfrost_context *ctx, bool has_draws, b
         if (pandev_ioctl(nondrm->fd, KBASE_IOCTL_JOB_SUBMIT, &submit))
                 printf("Error submitting\n");
 
-#ifdef DUMP_PERFORMANCE_COUNTERS
-        /* Dump the performance counters as soon as we submit work */
-        if (pandev_ioctl(nondrm->fd, KBASE_IOCTL_HWCNT_DUMP, NULL)) {
-                fprintf(stderr, "Error dumping counters\n");
-                return;
-        }
-#endif
-
         /* Return fragment ID */
         return atoms[1].atom_number;
 }
@@ -261,8 +253,8 @@ panfrost_nondrm_allocate_slab(struct panfrost_screen *screen,
 {
 	struct panfrost_nondrm *nondrm = (struct panfrost_nondrm *)screen->driver;
         int flags = BASE_MEM_PROT_CPU_RD | BASE_MEM_PROT_CPU_WR |
-                    BASE_MEM_PROT_GPU_RD | BASE_MEM_PROT_GPU_WR |
-                    BASE_MEM_COHERENT_LOCAL;
+                    BASE_MEM_PROT_GPU_RD | BASE_MEM_PROT_GPU_WR;
+
         int out_flags;
 
         if (extra_flags & PAN_ALLOCATE_EXECUTE)
@@ -271,6 +263,12 @@ panfrost_nondrm_allocate_slab(struct panfrost_screen *screen,
         if (extra_flags & PAN_ALLOCATE_GROWABLE)
                 flags |= BASE_MEM_GROW_ON_GPF;
 
+        if (extra_flags & PAN_ALLOCATE_INVISIBLE)
+                flags &= ~(BASE_MEM_PROT_CPU_RD | BASE_MEM_PROT_CPU_WR);
+
+        if (extra_flags & PAN_ALLOCATE_COHERENT_LOCAL)
+                flags |= BASE_MEM_COHERENT_LOCAL;
+
         /* w+x are mutually exclusive */
         if (flags & BASE_MEM_PROT_GPU_EX)
                 flags &= ~BASE_MEM_PROT_GPU_WR;
@@ -288,7 +286,9 @@ panfrost_nondrm_allocate_slab(struct panfrost_screen *screen,
          * mmap
          */
         if (mem->gpu == 0x41000) {
-                if ((mem->cpu = mmap(NULL, mem->size, 3, 1,
+                int prot = (extra_flags & PAN_ALLOCATE_INVISIBLE) ? PROT_NONE : (PROT_READ | PROT_WRITE);
+
+                if ((mem->cpu = mmap(NULL, mem->size, prot, 1,
                                      nondrm->fd, mem->gpu)) == MAP_FAILED) {
                         perror("mmap");
                         abort();
@@ -359,6 +359,16 @@ panfrost_nondrm_enable_counters(struct panfrost_screen *screen)
         }
 }
 
+static void
+panfrost_nondrm_dump_counters(struct panfrost_screen *screen)
+{
+	struct panfrost_nondrm *nondrm = (struct panfrost_nondrm *) screen->driver;
+
+        if (pandev_ioctl(nondrm->fd, KBASE_IOCTL_HWCNT_DUMP, NULL)) {
+                fprintf(stderr, "Error dumping counters\n");
+                return;
+        }
+}
 
 struct panfrost_driver *
 panfrost_create_nondrm_driver(int fd)
@@ -377,6 +387,7 @@ panfrost_create_nondrm_driver(int fd)
 	driver->base.free_slab = panfrost_nondrm_free_slab;
 	driver->base.free_imported_bo = panfrost_nondrm_free_imported_bo;
 	driver->base.enable_counters = panfrost_nondrm_enable_counters;
+	driver->base.dump_counters = panfrost_nondrm_dump_counters;
 
         ret = ioctl(fd, KBASE_IOCTL_VERSION_CHECK, &version);
         if (ret != 0) {
-- 
2.17.1

